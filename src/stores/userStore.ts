
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export type UserRole = 'admin' | 'analyst';

export interface User {
  id: string;
  name: string;
  email: string;
  role: UserRole;
  avatar?: string;
}

interface UserState {
  user: User | null;
  token: string | null;
  isLoading: boolean;
  error: string | null;
  login: (email: string, password: string) => Promise<void>;
  signup: (name: string, email: string, password: string) => Promise<void>;
  logout: () => void;
  updateProfile: (userData: Partial<User>) => Promise<void>;
}

// Mock API calls for demo purposes - in a real app, these would connect to a backend
const mockLogin = async (email: string, password: string): Promise<{user: User, token: string}> => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 800));
  
  if (email === 'admin@example.com' && password === 'password') {
    return {
      user: {
        id: '1',
        name: 'Admin User',
        email: 'admin@example.com',
        role: 'admin',
      },
      token: 'mock-jwt-token-admin'
    };
  } else if (email === 'analyst@example.com' && password === 'password') {
    return {
      user: {
        id: '2',
        name: 'Analyst User',
        email: 'analyst@example.com',
        role: 'analyst',
      },
      token: 'mock-jwt-token-analyst'
    };
  }
  
  throw new Error('Invalid credentials');
};

const mockSignup = async (name: string, email: string, password: string): Promise<{user: User, token: string}> => {
  // Simulate API delay
  await new Promise(resolve => setTimeout(resolve, 800));
  
  // In a real app, we would create a new user in the database
  return {
    user: {
      id: '3', // Would be generated by the database
      name,
      email,
      role: 'analyst', // Default role for new users
    },
    token: 'mock-jwt-token-new-user'
  };
};

export const useUserStore = create<UserState>()(
  persist(
    (set) => ({
      user: null,
      token: null,
      isLoading: false,
      error: null,
      
      login: async (email, password) => {
        set({ isLoading: true, error: null });
        try {
          const { user, token } = await mockLogin(email, password);
          set({ user, token, isLoading: false });
        } catch (error) {
          set({ error: (error as Error).message, isLoading: false });
          throw error;
        }
      },
      
      signup: async (name, email, password) => {
        set({ isLoading: true, error: null });
        try {
          const { user, token } = await mockSignup(name, email, password);
          set({ user, token, isLoading: false });
        } catch (error) {
          set({ error: (error as Error).message, isLoading: false });
          throw error;
        }
      },
      
      logout: () => {
        set({ user: null, token: null });
      },
      
      updateProfile: async (userData) => {
        set((state) => {
          if (!state.user) return state;
          return {
            user: {
              ...state.user,
              ...userData,
            }
          };
        });
      },
    }),
    {
      name: 'user-storage',
      partialize: (state) => ({ user: state.user, token: state.token }),
    }
  )
);
